/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import controller.MoradorController;
import controller.ReservaController;
import controller.UnidadeController;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.Funcionario;
import model.Morador;
import model.Reserva;
import model.Unidade;

/**
 *
 * @author devmat
 */
public class TelaReservas extends javax.swing.JInternalFrame {
    int idChave;
    int idMorador;
    int idUnidade;
    Funcionario funcionario;
    
    /**
     * Creates new form TelaReservas
     */
    public TelaReservas(Funcionario fun) {
        initComponents();
        
        ListagemUsuarioDelet();
        ListagemUnidades();
        pesquisarUsuario();
        pesquisarUnidade();
        
        funcionario = fun;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void pesquisarUsuario(){
        campMorador.getDocument().addDocumentListener(
                new DocumentListener(){
            //Anotação que informa que eu nção estou escrevendo um método e sim que eu estou sobre escrevendo
            //o método atual
             @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
            }// fim do insertUpdate
             @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
            }
             @Override
         public void changedUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
         }
        private void pesquisar (){
            ListagemUsuarioN(campMorador.getText());
        }//fim do método pesquisar
        });//fim do método de captura
    }//fim do método PesquisarUsuario
    
    public void pesquisarUnidade(){
        campUnidade.getDocument().addDocumentListener(
                new DocumentListener(){
            //Anotação que informa que eu nção estou escrevendo um método e sim que eu estou sobre escrevendo
            //o método atual
             @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
            }// fim do insertUpdate
             @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
            }
             @Override
         public void changedUpdate(javax.swing.event.DocumentEvent e){
                pesquisar();
         }
        private void pesquisar (){
            ListagemUsuarioN(campUnidade.getText());
        }//fim do método pesquisar
        });//fim do método de captura
    }//fim do método PesquisarUsuario
    
    public void ListagemUsuarioN(String nomeUsuario){
        
        // chamando o produtos controller
        MoradorController controller = new MoradorController();
        // capturando a lista de produtos que vem do banco de dados
        List<Morador> listausuario = controller.listarMoradorNome(nomeUsuario);
        
        // Obtendo o modelo da tabela
        DefaultTableModel modeloTabela = 
                (DefaultTableModel) tabelaMorador.getModel();
    
    // Limpando a tabela antes de adicionar novos dados
       modeloTabela.setRowCount(0);
    
    // Verificando se a lista não é nula
    if (listausuario != null && !listausuario.isEmpty()) {
        // Jogando os dados para dentro da minha tabela
        for (Morador morador : listausuario) {
            // Criando uma nova linha para a tabela
            Object[] linha = {
              
    morador.getId_morador() != 0 ? morador.getId_morador() : "N/A", // Ajuste para int
    morador.getId_unidade() != 0 ? morador.getId_unidade() : "N/A", // Ajuste para int
    morador.getNome() != null ? morador.getNome() : "N/A", // Verifique se é null
    morador.getCpf() != null ? morador.getCpf() : "N/A", // Verifique se é null
    morador.getEmail() != null ? morador.getEmail() : "N/A", // Verifique se é null
    morador.getData_nasc() != null ? morador.getData_nasc() : "N/A" // Verifique se é null
};

   
            // Adicionando a linha ao modelo da tabela
            modeloTabela.addRow(linha);
        }
    } else {
        JOptionPane.showMessageDialog
        (this, "Nenhum produto encontrado.");
    }
}// fim do metodo ListagemUsuarioN()
    
    
    public void ListagemUnidadeNome(String nomUsuario){
       UnidadeController controller = new UnidadeController();
        // capturando a lista de produtos que vem do banco de dados
        List<Unidade> listausuario = controller.listarUnidadeNome(nomUsuario);
        
        // Obtendo o modelo da tabela
        DefaultTableModel modeloTabela = 
                (DefaultTableModel) tabelaUnidade.getModel();
    
    // Limpando a tabela antes de adicionar novos dados
       modeloTabela.setRowCount(0);
    
    // Verificando se a lista não é nula
    if (listausuario != null && !listausuario.isEmpty()) {
        // Jogando os dados para dentro da minha tabela
        for (Unidade unidade : listausuario) {
            // Criando uma nova linha para a tabela
            Object[] linha = {
             
    unidade.getId_unidade() != 0 ? unidade.getId_unidade() : "N/A", // Ajuste para int
    unidade.getId_chave() != 0 ? unidade.getId_chave() : "N/A", // Ajuste para int
    unidade.getNome() != null ? unidade.getNome() : "N/A", // Verifique se é null
    unidade.getTipo() != null ? unidade.getTipo() : "N/A", // Verifique se é null
    unidade.getNumero() != null ? unidade.getNumero() : "N/A", // Verifique se é null
    unidade.getBloco() != null ? unidade.getBloco() : "N/A", // Verifique se é null
    unidade.getCapacidade() != null ? unidade.getCapacidade() : "N/A" // Verifique se é null
};

   
            // Adicionando a linha ao modelo da tabela
            modeloTabela.addRow(linha);
        }
    } else {
        JOptionPane.showMessageDialog
        (this, "Nenhum produto encontrado.");
    }
}// fim do metodo ListagemUsuarioN()
    
    
    public void ListagemUsuarioDelet(){
    
        
        // chamando o produtos controller
        MoradorController controller = new MoradorController();
        // capturando a lista de produtos que vem do banco de dados
        List<Morador> listarMorador= controller.listarMorador();
        
        // Obtendo o modelo da tabela
        DefaultTableModel modeloTabela = 
                (DefaultTableModel) tabelaMorador.getModel();
    
    // Limpando a tabela antes de adicionar novos dados
       modeloTabela.setRowCount(0);
    
    // Verificando se a lista não é nula
    if (listarMorador != null && !listarMorador.isEmpty()) {
        // Jogando os dados para dentro da minha tabela
        for (Morador morador : listarMorador) {
            // Criando uma nova linha para a tabela
            Object[] linha = {
             morador.getId_morador(), // Ajuste para int
             morador.getId_unidade(), // Ajuste para int
             morador.getNome(), // Verifique se é null
             morador.getCpf(), // Verifique se é null
             morador.getEmail(), // Verifique se é null
             morador.getData_nasc() // Verifique se é null
            };
            // Adicionando a linha ao modelo da tabela
            modeloTabela.addRow(linha);
           
        }
         
        
    } else {
        JOptionPane.showMessageDialog
        (this, "Nenhum Cliente encontrado.");
    }
       
 }//fim do método de listagemUsuarioP()
    
    public void ListagemUnidades(){
        
        // chamando o produtos controller
        UnidadeController controller = new UnidadeController();
        // capturando a lista de produtos que vem do banco de dados
        List<Unidade> listaunidade = controller.listarUnidade();
        
        // Obtendo o modelo da tabela
        DefaultTableModel modeloTabela = 
                (DefaultTableModel) tabelaUnidade.getModel();
    
    // Limpando a tabela antes de adicionar novos dados
       modeloTabela.setRowCount(0);
    
    // Verificando se a lista não é nula
    if (listaunidade != null && !listaunidade.isEmpty()) {
        // Jogando os dados para dentro da minha tabela
        for (Unidade unidade : listaunidade) {
            // Criando uma nova linha para a tabela
            Object[] linha = {
                unidade.getId_unidade(),
                unidade.getId_chave(),
                unidade.getTipo(),
                unidade.getNumero(),
                unidade.getBloco(),
                unidade.getCapacidade(),
                 unidade.getNome()
            };
            // Adicionando a linha ao modelo da tabela
            modeloTabela.addRow(linha);
        }
    } else {
        JOptionPane.showMessageDialog
        (this, "Nenhum produto encontrado.");
    }
}// fim do metodo ListagemdeProdutos()
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butaoReservar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaUnidade = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        campUnidade = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMorador = new javax.swing.JTable();
        campMorador = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(730, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        butaoReservar.setText("RESERVAR");
        butaoReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butaoReservarActionPerformed(evt);
            }
        });
        getContentPane().add(butaoReservar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 110, 30));

        tabelaUnidade.setBackground(new java.awt.Color(255, 255, 255));
        tabelaUnidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ID_CHAVE", "NOME", "NUMERO", "BLOCO", "TIPO", "CAPACIDADE"
            }
        ));
        tabelaUnidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaUnidadeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaUnidade);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 720, 130));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Morador");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 60, 40));

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("PESQUISAR :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 80, -1));

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("PESQUISAR :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 80, -1));

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Unidade");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 240, 60, 40));

        campUnidade.setBackground(new java.awt.Color(255, 255, 255));
        campUnidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campUnidadeActionPerformed(evt);
            }
        });
        jPanel1.add(campUnidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, 300, 30));

        tabelaMorador.setBackground(new java.awt.Color(255, 255, 255));
        tabelaMorador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "CASA", "NOME", "CPF", "DATA_NASCIMENTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMorador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMoradorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaMorador);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 720, 110));

        campMorador.setBackground(new java.awt.Color(255, 255, 255));
        campMorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campMoradorActionPerformed(evt);
            }
        });
        jPanel1.add(campMorador, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 300, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butaoReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butaoReservarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //criando o objeto Controller
        ReservaController controller = new ReservaController();
        
        Reserva reserva = new Reserva ();
        //passando os valores para o objeto vendas
        reserva.setId_chave(this.idChave);
        reserva.setId_morador(this.idMorador);
        reserva.setId_unidade(this.idUnidade);
        reserva.setId_funcionario(funcionario.getId_funcionario());
        // captura a data atual do computador
        LocalDate dataatual = LocalDate.now();
        reserva.setData_reserva(dataatual.toString());
        
        reserva.setStatu("reservada");
   
        // passando os dados da venda para o banco de dados
        boolean cadastrou = controller.cadastroReserva(reserva);
        if(cadastrou){
            JOptionPane.showMessageDialog(
                    null,"Sua Reserva foi Cadastrada com sucesso!");
        }else{
           JOptionPane.showMessageDialog(
                    null,"Não foi possivel cadastrar Reserva!"); 
        }// fim do else
    }//GEN-LAST:event_butaoReservarActionPerformed

    private void campMoradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campMoradorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campMoradorActionPerformed

    private void campUnidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campUnidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campUnidadeActionPerformed

    private void tabelaMoradorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMoradorMouseClicked
        // TODO add your handling code here:
         // TODO add your handling code here:
        int linhaSelecionada = tabelaMorador.getSelectedRow();

    // Verificando se alguma linha foi selecionada
    if (linhaSelecionada >= 0) {
        // Definir modelo default para a tabela
        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaMorador.getModel();

        // Verificando se os valores não são nulos antes de usar toString()
        
        idMorador = modeloTabela.getValueAt(linhaSelecionada, 0) != null 
                    ? Integer.parseInt(modeloTabela.getValueAt(linhaSelecionada, 0).toString()) 
                    : 0;  // Valor padrão para idUnidade (caso seja nulo)
        
        
    } // fim do if
    }//GEN-LAST:event_tabelaMoradorMouseClicked

    private void tabelaUnidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaUnidadeMouseClicked
        // TODO add your handling code here:
        int linhaSelecionada = tabelaMorador.getSelectedRow();

    // Verificando se alguma linha foi selecionada
    if (linhaSelecionada >= 0) {
        // Definir modelo default para a tabela
        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaUnidade.getModel();

        // Verificando se os valores não são nulos antes de usar toString()
        
        idUnidade = modeloTabela.getValueAt(linhaSelecionada, 0) != null 
                    ? Integer.parseInt(modeloTabela.getValueAt(linhaSelecionada, 0).toString()) 
                    : 0;  // Valor padrão para idUnidade (caso seja nulo)
        idChave = modeloTabela.getValueAt(linhaSelecionada, 0) != null 
                    ? Integer.parseInt(modeloTabela.getValueAt(linhaSelecionada, 1).toString()) 
                    : 1;  // Valor padrão para idUnidade (caso seja nulo)
        
        
    } // fim do if
    }//GEN-LAST:event_tabelaUnidadeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butaoReservar;
    private javax.swing.JTextField campMorador;
    private javax.swing.JTextField campUnidade;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelaMorador;
    private javax.swing.JTable tabelaUnidade;
    // End of variables declaration//GEN-END:variables
}
